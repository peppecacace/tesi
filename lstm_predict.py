""" This module generates notes for a midi file using the
    trained neural network """
import glob
import pickle
import numpy
import matplotlib
from music21 import converter, instrument, note, chord, stream
from keras.models import Sequential
from keras.layers import Dense,Flatten,Embedding
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import Activation
from keras.utils import np_utils
from keras.callbacks import ModelCheckpoint
from matplotlib import pyplot as plt

def generate():
    """ Generate a piano midi file """
    w=15 #la nostra sequenza

    #load the notes used to train the model
    with open('data/seen_notes', 'rb') as filepath:
        notes = pickle.load(filepath)

    # Get all pitch names
    pitchnames = sorted(set(item for item in notes))
    # Get all pitch names
    n_vocab = len(set(notes))

    note_input, normalized_input = prepare_sequences(notes, n_vocab, w, pitchnames)
    model = create_network(note_input, n_vocab)
    prediction_output = generate_notes(model, note_input, pitchnames, n_vocab)
    create_midi(prediction_output)

def prepare_sequences(notes, n_vocab, w, pitchnames):
    """ Prepare the sequences used by the Neural Network """

    # get all pitch names
    #pitchnames = sorted(set(item for item in notes))

     # create a dictionary to map pitches to integers
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    note_input = []
    note_output = []

    duration_input = []
    duration_output = []

    # create input sequences and the corresponding outputs
    for i in range(0, len(notes) - w, 1):     ##for (inizio,fine,passo)
        sequence_in = notes[i:i + w]
        sequence_out = notes[i + w]
        note_input.append([note_to_int[char] for char in sequence_in])
        note_output.append(note_to_int[sequence_out])


    n_patterns = len(note_input)

    # reshape the input into a format compatible with LSTM layers
    normalized_input = numpy.reshape(note_input, (n_patterns, w, 1))
    # normalize input

    normalized_input = normalized_input / float(n_vocab)

    note_output = np_utils.to_categorical(note_output)
    #note_input = np_utils.to_categorical(note_input)

    return note_input, normalized_input


def create_network(note_input, n_vocab):
    """ create the structure of the neural network """
    model = Sequential()
    #model.add(Embedding(input_dim=n_vocab,output_dim=256))
    model.add(LSTM(
        units=256,
        input_shape=(note_input.shape[1],note_input.shape[2]),
        return_sequences=True
    ))                      ##LSTM(unità, dimensionalità degli ingressi,se mandare in uscita tutta la sequenza o una parte(?))
    model.add(Dropout(0.3))     ##dropout =  Fraction of the units to drop for the linear transformation of the inputs.
    model.add(LSTM(units=256))
    model.add(Dropout(0.3))
    #model.add(LSTM(units=256,return_sequences=True))
    #model.add(Dense(128))       ##a quanto pare ti genera una rete "normale"
    #model.add(Dropout(0.3))
    model.add(Dense(units=n_vocab))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])

    ##To calculate the loss for each iteration of the training we
    ## will be using categorical cross entropy since each of our outputs
    ## only belongs to a single class and we have more than two classes to work with.
    ## And to optimise our network we will use a RMSprop optimizer as it is usually a very good choice for recurrent neural networks.

    # Load the weights to each node
    model.load_weights('mymodel-50-0.4568.hdf5')

    return model

def generate_notes(model, note_input, pitchnames, n_vocab):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = numpy.random.randint(0, len(note_input)-1)

    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = note_input[start]
    prediction_output = []

    # generate n notes
    n=1
    for note_index in range(n):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = numpy.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return prediction_output

def create_midi(prediction_output):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp='test_output.mid')

if __name__ == '__main__':
    generate()
